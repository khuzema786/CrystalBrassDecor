const util = require("util");
const {
  readdir,
  readFile,
  writeFile,
  watch,
  unlink,
  rm,
  mkdir,
} = require("fs/promises");
const copy = util.promisify(require("fs-extra").copy);
const { compress } = require("compress-images/promise");
const { minify: htmlminify } = require("html-minifier");
const { minify: cssminify } = require("csso");
const { minify: jsminify } = require("uglify-js");

const isDevelopment = process.argv[3] === "--development";

const options = {
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
  collapseWhitespace: true,
};

const getProductsMenu = (products) => {
  let product = Object.keys(products);
  let output = "";
  for (let i = 0; i < product.length; i++) {
    if (products[product[i]].leaf) {
      output += `<li><a onclick="load('products/${product[i].replace(
        " ",
        "-"
      )}.html');">${product[i]}</a></li>`;
    } else {
      output += `<li><a href="#">${product[i]}</a>`;
      output += `<ul>\n`;
      output += getProductsMenu(products[product[i]]);
      output += `</ul>\n`;
      output += "</li>";
    }
  }
  return output;
};

const getAllProducts = (products, level = 1) => {
  let product = Object.keys(products);
  let output = "";
  for (let i = 0; i < product.length; i++) {
    if (products[product[i]].leaf) {
      if (level === 1) {
        output += `
          <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
              <h1 class="heading">${product[i]}</h1>
            </div>
          </div>
          <div class="row">
        `;
        output += `<div class="col-md-3 col-sm-12 col-xs-12">
            <div class="product-blk">
              <a onclick="load('products/${product[i].replace(
                " ",
                "-"
              )}.html');">
                <div class="product-img">
                  <img src="${
                    products[product[i]].images
                      ? products[product[i]].images[0]
                      : "assets/images/product/Xylo/1.jpg"
                  }" alt="${product[i]}" class="img-fluid" />
                </div>
                <div class="product-txt">
                  <p>${product[i]}</p>
                </div>
              </a>
            </div>
          </div>`;
        output += `</div>\n`;
      } else {
        output += `<div class="col-md-3 col-sm-12 col-xs-12">
          <div class="product-blk">
            <a onclick="load('products/${product[i].replace(" ", "-")}.html');">
              <div class="product-img">
                <img src="${
                  products[product[i]].images
                    ? products[product[i]].images[0]
                    : "assets/images/product/Xylo/1.jpg"
                }" alt="${product[i]}" class="img-fluid" />
              </div>
              <div class="product-txt">
                <p>${product[i]}</p>
              </div>
            </a>
          </div>
        </div>`;
      }
    } else if (level === 1) {
      output += `
        <div class="row">
          <div class="col-md-12 col-sm-12 col-xs-12">
            <h1 class="heading">${product[i]}</h1>
          </div>
        </div>
        <div class="row">
      `;
      output += getAllProducts(products[product[i]], level + 1);
      output += `</div>\n`;
    } else {
      output += getAllProducts(products[product[i]], level + 1);
    }
  }
  return output;
};

const createProductPage = async (products, productHtml) => {
  let product = Object.keys(products);
  for (let i = 0; i < product.length; i++) {
    if (products[product[i]].leaf) {
      let productTemplate = productHtml.toString();
      productTemplate = productTemplate
        .replace(
          "{{available-colors}}",
          (products[product[i]].colors || ["SS"])
            .map(
              (color) => `<div class="${color.toLowerCase()}">${color}</div>`
            )
            .join("\n")
        )
        .replaceAll("{{name}}", product[i])
        .replace(
          "{{description}}",
          (products[product[i]].description || [])
            .map((description) => `<p>${description}</p>`)
            .join("\n")
        )
        .replace(
          "{{specifications}}",
          (products[product[i]].specifications || [])
            .map(
              (spec) => `<tr>
              <td>${spec[0]}</td>
              <td>${spec[1]}</td>
              <td>${spec[2]}</td>
              <td>${spec[3]}</td>
            </tr>
          `
            )
            .join("\n")
        )
        .replace(
          "{{images-showcase}}",
          (products[product[i]].images || ["assets/images/product/Xylo/1.jpg"])
            .map(
              (image) => `<li class="o-slider-image-viewer__slide">
                    <img class="c-product-image-viewer__image" src="${image}">
                  </li>`
            )
            .join("\n")
        )
        .replace(
          "{{images-select}}",
          (products[product[i]].images || ["assets/images/product/Xylo/1.jpg"])
            .map(
              (image) => `<span class="o-slider-image-viewer__dot">
                  <img class="o-slider-image-viewer__dot-image" src="${image}">
                </span>`
            )
            .join("\n")
        );

      if (isDevelopment) {
        await writeFile(`dist/products/${product[i]}.html`, productTemplate, {
          encoding: "utf8",
        });
      } else {
        await writeFile(
          `dist/products/${product[i]}.html`,
          htmlminify(productTemplate, options),
          {
            encoding: "utf8",
          }
        );
      }
    } else {
      await createProductPage(products[product[i]], productHtml);
    }
  }
  return;
};

const getGalleryLayout = async () => {
  const gallery = await readdir("src/assets/images/gallery", {
    withFileTypes: true,
  });
  let output = "";
  for (const image of gallery) {
    output += `<div class="col-lg-3 col-md-6 col-sm-6 col-xs-12 image">
          <div class="img-wrapper">
              <div class="product-blk">
                  <a class="img-responsive" href="assets/images/gallery/${
                    image.name
                  }">
                      <div class="product-img">
                        <img src="assets/images/gallery/${image.name}" alt="${
      image.name
    }" class="img-fluid" />
                      </div>
                      <div class="product-txt">
                          <p>${image.name
                            .split(".")[0]
                            .split("-")
                            .map(
                              (el) => el.slice(0, 1).toUpperCase() + el.slice(1)
                            )
                            .join(" ")}</p>
                      </div>
                  </a>
                  <div class="img-overlay">
                      <i class="fa fa-plus-circle" aria-hidden="true"></i>
                  </div>
              </div>
          </div>
      </div>\n`;
  }
  return output;
};

const main = async () => {
  const products = require("./xlsx-reader").getProducts(`xlsx/products.xlsx`);

  const files = [];
  const processDir = async (dirname) => {
    try {
      const items = await readdir(dirname, { withFileTypes: true });
      for (const item of items) {
        if (item.isDirectory()) {
          await processDir(`${dirname}/${item.name}`);
        } else {
          files.push(`${dirname}/${item.name}`);
        }
      }
    } catch (err) {}
  };

  await rm("dist/*", { recursive: true, force: true });
  await mkdir("dist/products", { recursive: true });
  await copy("src", "dist", { overwrite: true });
  await unlink("dist/product.html");
  await rm("dist/xlsx", { recursive: true, force: true });

  await processDir(`dist`);
  let htmlFiles = files.filter((file) => file.match(/\.html$/gm));
  let cssFiles = files.filter((file) => file.match(/\.css$/gm));
  let jsFiles = files.filter((file) => file.match(/\.js$/gm));
  if (!isDevelopment && process.argv[2] !== "--no-image-compress") {
    await rm("dist/assets/images", { recursive: true, force: true });
    await mkdir("dist/assets/images", { recursive: true });
  }

  if (!isDevelopment && process.argv[2] !== "--no-image-compress") {
    await compress({
      source: `src/assets/images/**/*.{jpg,JPG,jpeg,JPEG,png,svg}`,
      destination: `dist/assets/images/`,
      // compression : 0 - 100
      enginesSetup: {
        // jpg: { engine: "mozjpeg", command: ["-quality", "60"] },
        // png: { engine: "pngquant", command: ["--quality=20-50", "-o"] },
        jpg: { engine: "mozjpeg", command: ["-quality", "20"] },
        png: { engine: "pngquant", command: ["--quality=30-50", "-o"] },
        svg: { engine: "svgo", command: "--multipass" },
        gif: {
          engine: "gifsicle",
          command: ["--colors", "64", "--use-col=web"],
        },
      },
    });

    await rm("log", { recursive: true, force: true });
  }

  let index = await readFile("dist/index.html");
  index = index
    .toString()
    .replace(/\{\{products\}\}/gm, getProductsMenu(products));

  if (isDevelopment) {
    await writeFile("dist/index.html", index, { encoding: "utf8" });
  } else {
    await writeFile("dist/index.html", htmlminify(index, options), {
      encoding: "utf8",
    });
  }

  let gallery = await readFile("dist/gallery.html");
  gallery = gallery
    .toString()
    .replace("{{images-gallery}}", await getGalleryLayout());

  if (isDevelopment) {
    await writeFile("dist/gallery.html", gallery, { encoding: "utf8" });
  } else {
    await writeFile("dist/gallery.html", htmlminify(gallery, options), {
      encoding: "utf8",
    });
  }

  let productsHtml = await readFile("dist/products.html");
  productsHtml = productsHtml
    .toString()
    .replace(/\{\{products\}\}/gm, getAllProducts(products));

  if (isDevelopment) {
    await writeFile("dist/products.html", productsHtml, { encoding: "utf8" });
  } else {
    await writeFile("dist/products.html", htmlminify(productsHtml, options), {
      encoding: "utf8",
    });
  }

  const productHtml = await readFile(`src/product.html`);
  await createProductPage(products, productHtml);

  // if (!isDevelopment) {
  //   for (let i = 0; i < htmlFiles.length; i++) {
  //     let data = await readFile(htmlFiles[i]);
  //     await writeFile(htmlFiles[i], htmlminify(data, options), {
  //       encoding: "utf8",
  //     });
  //   }

  //   for (let i = 0; i < cssFiles.length; i++) {
  //     const data = await readFile(cssFiles[i]);
  //     await writeFile(cssFiles[i], cssminify(data.toString()).css, {
  //       encoding: "utf8",
  //     });
  //   }

  //   for (let i = 0; i < jsFiles.length; i++) {
  //     let data = await readFile(jsFiles[i]);
  //     await writeFile(jsFiles[i], jsminify(data).code, {
  //       encoding: "utf8",
  //     });
  //   }
  // }
};

(async () => {
  try {
    await main();
    if (process.argv[2] === "--watch") {
      const watcher = watch(`src`, { recursive: true });
      for await (const event of watcher) {
        console.log(event);
        await main();
      }
    }
  } catch (err) {
    if (err.name === "AbortError") return;
    throw err;
  }
})();
